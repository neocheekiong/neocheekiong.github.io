{"version":3,"sources":["pages/ProjectCard.jsx","pages/projectdata/project-data.js","pages/Projects.jsx","pages/Profile.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ProjectCard","description","title","github","deployment","technologies","size","color","className","dangerouslySetInnerHTML","__html","map","tech","href","fab","icon","projects","Projects","props","project","Profile","fluid","style","padding","backgroundImage","overlay","collection","src","center","alt","App","useState","collapse","setCollapse","isWideEnough","fixed","dark","expand","scrolling","transparent","onClick","event","isOpen","navbar","left","active","scroll","scrollToTop","to","duration","smooth","align","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7fe00b0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardFooter, MDBCardHeader, MDBCardText, MDBCardTitle, MDBCol, MDBIcon, MDBLink } from 'mdbreact'\r\n\r\n\r\nfunction ProjectCard({description, title, github, deployment, technologies}) {\r\n  return (\r\n    <MDBCol size='3'>\r\n      <MDBCard color='indigo darken-4'>\r\n        <MDBCardHeader>\r\n          <MDBCardTitle className='white-text text-center'>{title}</MDBCardTitle>\r\n        </MDBCardHeader>\r\n        <MDBCardBody className='white-text'>\r\n          <MDBCardText className='white-text' dangerouslySetInnerHTML={{__html: description}}>\r\n          </MDBCardText>\r\n          <h5>Technologies Used</h5>\r\n          {technologies.map(tech => <li>{tech}</li>)}\r\n        </MDBCardBody>\r\n        <MDBCardFooter>\r\n          <MDBBtn href={github} color='light-blue lighten-3'><MDBIcon fab icon=\"github\" />  Repo</MDBBtn>\r\n          <MDBBtn href={deployment}>Visit the Project</MDBBtn>\r\n        </MDBCardFooter>\r\n      </MDBCard>\r\n    </MDBCol>\r\n  )\r\n}\r\n\r\nProjectCard.propTypes = {\r\n  description: PropTypes.string,\r\n  title: PropTypes.string,\r\n  github: PropTypes.string,\r\n  deployment: PropTypes.string,\r\n  technologies: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default ProjectCard\r\n\r\n","const projects = [\r\n  {\r\n    title:`Clinic Online Booking App`,\r\n    description:'An app to allow online booking for the clinic I work in. This is meant to work in conjunction with Vital One EMR system. It allows for clients to book appointments with providers and subsequently have video consultations with them.',\r\n    technologies: ['express', 'ReactJS', 'simple-peer', 'Mongo with mongoose', 'PassportJS', 'socket.io', 'bcrypt'],\r\n    github:'https://github.com/neocheekiong/promises-online-booking',\r\n    deployment: 'https://promises-booking-app.herokuapp.com/'\r\n  },\r\n  {\r\n    title:`Pinapps`,\r\n    description:'A place to collate your favourite apps and share them with others. A collaboration with <a class=\\'link\\' href=\\'https://github.com/siewla\\'>Pang Siew La</a class=\\'link\\'>. ',\r\n    technologies: ['express', 'ReactJS','MongoDB', 'cloudinary', 'capture-website', 'bcrypt', 'cors', 'express-jwt', 'google auth', 'Material Design Bootstrap for React', 'react-promise-tracker', 'mongoose', 'moment', 'react-loading'],\r\n    github:'https://github.com/siewla/pinapps',\r\n    deployment: 'https://pinapps.herokuapp.com/'\r\n  },\r\n  {\r\n    title:`Certification Board Website`,\r\n    description:'A Website for a Certification Board. Applicants can apply for the certification with their credentials. A Registrar will then approve their applications.',\r\n    technologies: ['MongoDB', 'ejs', 'expressJS','bcrypt','express-sessions', 'cloudinary'],\r\n    github:'https://github.com/neocheekiong/APCB-website',\r\n    deployment: 'https://apcb.herokuapp.com/'\r\n  },\r\n  {\r\n    title:`You Don't Know Singapore`,\r\n    description:'Some Singapore trivia based on a map of Singapore.',\r\n    technologies: ['Mapbox', 'jQuery'],\r\n    github:'https://github.com/neocheekiong/you-dont-know-singapore/',\r\n    deployment: 'https://neocheekiong.github.io/you-dont-know-singapore/'\r\n  }\r\n]\r\n\r\nexport default projects\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MDBCardHeader, MDBCardTitle, MDBJumbotron, MDBRow } from 'mdbreact'\r\nimport ProjectCard from './ProjectCard'\r\nimport projects from './projectdata/project-data'\r\n\r\nfunction Projects(props) {\r\n\r\n  return (\r\n    <MDBJumbotron className='light-blue darken-3'>\r\n      <MDBCardHeader color='white'>\r\n        <MDBCardTitle className='text-center black-text'>Projects</MDBCardTitle>\r\n      </MDBCardHeader>\r\n      <MDBRow>\r\n        {projects.map(project => {\r\n          return <ProjectCard title={project.title} \r\n          description={project.description}\r\n          technologies={project.technologies}\r\n          github={project.github}\r\n          deployment={project.deployment} />\r\n        })}\r\n      </MDBRow>\r\n    </MDBJumbotron>\r\n  )\r\n}\r\n\r\nProjects.propTypes = {\r\n\r\n}\r\n\r\nexport default Projects\r\n\r\n","import React from \"react\";\r\nimport { MDBJumbotron, MDBContainer, MDBRow, MDBCol, MDBCardTitle, MDBMask, MDBCard, MDBCardHeader, MDBCardImage, MDBCardBody, MDBCardText, MDBIcon } from \"mdbreact\";\r\nimport Projects from \"./Projects\";\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <MDBContainer fluid>\r\n      <MDBRow>\r\n        <MDBCol style={{padding: 0}}>\r\n          <MDBJumbotron style={{ padding: 0 }}>\r\n            <MDBCol className=\"text-white text-center py-5 px-4 my-5\" style={{ backgroundImage: `url(/img/profile-banner.png)`, 'background-position': 'center' }}>\r\n              <MDBMask overlay=\"cyan-light\">\r\n                <MDBCol className=\"py-5\">\r\n                  <MDBCardTitle className=\"h1-responsive pt-3 m-5 font-bold banner-secondary\">Profile</MDBCardTitle>\r\n                  <p className=\"mx-5 mb-5\">Adept in MERN stack\r\n                  </p>\r\n                </MDBCol>\r\n              </MDBMask>\r\n            </MDBCol>\r\n          </MDBJumbotron>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow>\r\n        <MDBCol size='3'>\r\n          <MDBCard collection color='indigo darken-4'>\r\n            <MDBCardBody>\r\n              <MDBCardHeader>\r\n                <MDBCardTitle className='cyan-text text-center'>About Me</MDBCardTitle>\r\n              </MDBCardHeader>\r\n              <MDBCardImage src='/img/profile-picture.png' className=\"img-fluid\" color />\r\n              <MDBCardText className='cyan-text text-center'>\r\n                <MDBCardTitle>\r\n                  Main Frameworks Used\r\n                </MDBCardTitle>\r\n                <h5>Javascript</h5>\r\n                <ul style={{'list-style': 'none', padding:0}}>\r\n                  <li>ReactJS</li>\r\n                  <li>NodeJS</li>\r\n                  <li>MongoDB</li>\r\n                  <li>ExpressJS</li>\r\n                </ul>\r\n                <MDBRow center>\r\n                  <MDBCol size='2'><a href=\"https://www.linkedin.com/in/neo-chee-kiong\">\r\n                    <MDBIcon size='3x' fab icon=\"linkedin\" />\r\n                  </a></MDBCol>\r\n                  <MDBCol size='2'>\r\n                    <a href=\"https://github.com/neocheekiong\">\r\n                    <MDBIcon size='3x' fab icon=\"github\" />\r\n                    </a>\r\n                  </MDBCol>\r\n                  <MDBCol size='2'>\r\n                    <a href=\"https://leetcode.com/neocheekiong/\">\r\n                      <img src=\"img/LeetCode_logo_black.png\" href=\"https://leetcode.com/neocheekiong/\" alt=\"leet code\" className='img-fluid'/>\r\n                    </a>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </MDBCardText>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n        <MDBCol size='9'>\r\n          <Projects></Projects>        \r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n  )\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState } from 'react';\r\nimport './styles/App.css';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBContainer, MDBMask, MDBView, MDBLink, MDBNav} from 'mdbreact';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Profile from './pages/Profile';\r\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\r\nimport Projects from './pages/Projects';\r\n\r\n\r\nfunction App() {\r\n  const [collapse, setCollapse] = useState(false);\r\n  const [isWideEnough, setIsWideEnough] = useState(false);\r\n\r\n  const clickToCollapse = (event) => {\r\n    setCollapse(true);\r\n  }\r\n\r\n  return (\r\n    <div className='cool-primary'>\r\n      <header>\r\n        <Router>\r\n          <MDBNavbar color='indigo darken-3' fixed=\"top\" dark expand=\"md\" scrolling transparent>\r\n            <MDBNavbarBrand href=\"/\">\r\n              <strong>CKNeo</strong>\r\n            </MDBNavbarBrand>\r\n            {isWideEnough && <MDBNavbarToggler onClick={clickToCollapse} />}\r\n            <MDBCollapse isOpen={collapse} navbar>\r\n              <MDBNavbarNav left>\r\n                <MDBNavItem active>\r\n                  <Link onClick={scroll.scrollToTop} className='nav-link'>Home</Link>\r\n                </MDBNavItem>\r\n                <MDBNavItem>\r\n                  <Link to='profile' duration='800' smooth={true} className='nav-link'>Profile</Link>\r\n                </MDBNavItem>\r\n                <MDBNavItem>\r\n                  <MDBNavLink to=\"#\">Portfolio</MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem>\r\n                  <MDBNavLink to=\"#\">Hobbies & Interests</MDBNavLink>\r\n                </MDBNavItem>\r\n              </MDBNavbarNav>\r\n            </MDBCollapse>\r\n          </MDBNavbar>\r\n        </Router>\r\n\r\n        <MDBView src=\"/img/banner.png\">\r\n          <MDBMask overlay=\"purple-light\" className=\"flex-center flex-column text-white text-center\">\r\n            <h1 className='banner-primary'>Neo Chee Kiong</h1>\r\n            <h5 className='banner-secondary'>Software Developer</h5>\r\n          </MDBMask>\r\n        </MDBView>\r\n      </header>\r\n\r\n      <main>\r\n          <MDBContainer className=\"text-center my-5 cyan-text\">\r\n            <blockquote align=\"center\" className='blockquote-primary'>I have been playing around computers ever since I can remember. After a long winding route, I am finally back where I belong.</blockquote>\r\n          </MDBContainer>\r\n      </main>\r\n\r\n      <section>\r\n        <Element name='profile'>\r\n          <Profile></Profile>\r\n        </Element>\r\n      </section>\r\n    </div>\r\n        \r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}